public class Scheduler {
    public static Boolean running = false;
    public interface IScheduler {
        String getName();
        void setWeek(Id weekId);
        Id run();
        List<Resource_Assignment__c> callImplementation(List<Work_Order__c> workOrders, List<Resource__c> resources);
    }
    
    
    public abstract class AbstractScheduler implements IScheduler {
        public Week__c week;
        public String name = 'Unknown';
        public void setWeek(Id weekId) {
            this.week = [SELECT Id,Fine_per_unfinished_WO__c, Week_End__c, Name FROM Week__c WHERE Id = :weekId LIMIT 1];
        }
        public Schedule__c createSchedule() {
            Schedule__c sch =  new Schedule__c(Name = 'Schedule for week: ' + this.week.Name + ' generated by ' + this.getName(), Week__c = this.week.Id);
            insert sch;
            return sch;
        }
        public Id run() {
            Scheduler.running = true;
            if (this.week == null) { 
                throw new SchedulerException('No week was passed');
            }
            Schedule__c sch = this.createSchedule();
            List<Work_Order__c> workOrders = [SELECT Id, Name, Amount_of_Work__c, End_Time__c, Fine_per_hour_delay__c, Start_Time__c, Week__c FROM Work_Order__c WHERE Week__c = :this.week.Id];
            List<Resource__c> resources = [SELECT Id, Name, End_Regular_Working_Time__c, Overtime_Capable__c, Overtime_Rate__c, Performance__c, Regular_Rate__c, Start_Regular_Working_Time__c, Week__c FROM Resource__c WHERE Week__c = :this.week.Id];
            List<Resource_Assignment__c> assignments = this.callImplementation(workOrders, resources);
            for (Resource_Assignment__c ra : assignments) {
                ra.Schedule__c = sch.Id;
            }
            insert assignments;
            // validation  
            AssignmentValidationUtility.validateAssignmentForWeek(this.week.Id, sch.Id);
            return sch.Id;
        }
        public String getName() {
            return this.name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public abstract List<Resource_Assignment__c> callImplementation(List<Work_Order__c> workOrders, List<Resource__c> resources); 
    }
    
    public class SchedulerException extends Exception {}
}