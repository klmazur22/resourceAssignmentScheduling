import { LightningElement, api } from 'lwc';
import { loadScript } from 'lightning/platformResourceLoader';
import chartjs from '@salesforce/resourceUrl/ChartJS';
import { ShowToastEvent } from "lightning/platformShowToastEvent";
import getSchedulesByWeek from '@salesforce/apex/AssignmentChartDataProvider.getSchedulesByWeek';

export default class ScheduleComparison extends LightningElement {
    @api recordId;
    @api weekid;
    chart;
    isChartJsInitialized = false;

    async renderedCallback() {
        if (!this.isChartJsInitialized) {
            await loadScript(this, chartjs);
        } else {
            return;
        }
        this.isChartJsInitialized = true;
        if(!this.weekid){
            // if weekid is not set by parent LWC, take recordId from the page
            this.weekid = this.recordId;
        }
        this.createSchedule();
    }

    schedules = [];
    labels = [];
    assignedWorkOrders = [];
    unassignedWorkOrders = [];
    totalCost = [];
    labourCost = [];
    lateWorkFine = [];
    unfinishedWorkFine = [];
    regularTimeHours = [];
    overtimeHours = [];

    createSchedule(){
        getSchedulesByWeek({ weekId: this.weekid })
        .then(data => {
            this.schedules = data;
            this.schedules.forEach(schedule => {
                // take the name of the Scheduler by taking the substring after "gerenated by"
                this.labels.push(schedule.Name.split('generated by ')[1]);
                this.assignedWorkOrders.push(schedule.Number_of_Assignments__c);
                this.unassignedWorkOrders.push(schedule.Number_of_Work_Orders_in_Week__c - schedule.Number_of_Assignments__c);
                this.totalCost.push(schedule.Total_Cost__c);
                this.labourCost.push(schedule.Total_Labour_Cost__c);
                this.lateWorkFine.push(schedule.Total_Fine__c);
                this.unfinishedWorkFine.push(schedule.Total_Fine_Unfinished_Work_Orders__c);
                this.regularTimeHours.push(schedule.Total_Hours_spent_in_Regular_Time__c);
                this.overtimeHours.push(schedule.Total_Hours_spent_in_Overtime_Hours__c);
            });
            try {
                let config1 = {
                    type: "bar",
                    data: {
                        labels: this.labels,
                        datasets: [
                            {
                            label: 'Assigned Work Orders',
                            data: this.assignedWorkOrders,
                            backgroundColor: '#0E9EDA',
                            },
                            {
                            label: 'Unassigned Work Orders',
                            data: this.unassignedWorkOrders,
                            backgroundColor: '#D8230D',
                            },
                        ]
                    }
                };
                let config2 = {
                    type: "bar",
                    data: {
                        labels: this.labels,
                        datasets: [
                            {
                            label: 'Total cost',
                            data: this.totalCost,
                            backgroundColor: '#0076D1',
                            },
                            {
                            label: 'Labour cost',
                            data: this.labourCost,
                            backgroundColor: '#08AAED',
                            },
                            {
                            label: 'Fine for late work orders',
                            data: this.lateWorkFine,
                            backgroundColor: '#04E1CA',
                            },
                            {
                            label: 'Fine for unfinished work orders',
                            data: this.unfinishedWorkFine,
                            backgroundColor: '#076189',
                            },
                        ]
                    }
                };
                let config3 = {
                    type: "bar",
                    data: {
                        labels: this.labels,
                        datasets: [
                            {
                            label: 'Regular Time Hours',
                            data: this.regularTimeHours,
                            backgroundColor: '#182CCE',
                            },
                            {
                            label: 'Overtime Hours',
                            data: this.overtimeHours,
                            backgroundColor: '#D97D0D',
                            },
                        ]
                    }
                };
                this.setupChart(config1, 'chart1');
                this.setupChart(config2, 'chart2');
                this.setupChart(config3, 'chart3');
            } catch (error) {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error setting canvas',
                        message: error.message,
                        variant: 'error',
                    }),
                );
            }
        })
        .catch(error => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Schedule not retrieved',
                    message: error.message,
                    variant: 'error',
                }),
            );
        });
    }

    setupChart(config, chartName){
        const canvas = document.createElement('canvas');
        this.template.querySelector('.' + chartName).appendChild(canvas);
        const ctx = canvas.getContext('2d');
        this.chart = new window.Chart(ctx, config);
    }
}