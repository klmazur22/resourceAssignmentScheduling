import { LightningElement, api } from 'lwc';
import { loadScript } from 'lightning/platformResourceLoader';
import chartjs from '@salesforce/resourceUrl/ChartJS';
import { ShowToastEvent } from "lightning/platformShowToastEvent";
import getSchedulesByWeek from '@salesforce/apex/ScheduleComparisonController.getSchedulesByWeek';

export default class ScheduleComparison extends LightningElement {
    @api recordId;
    @api weekid;
    @api variant = 'Vertical';
    isChartJsInitialized = false;

    async renderedCallback() {
        if (!this.isChartJsInitialized) {
            await loadScript(this, chartjs);
        } else {
            return;
        }
        this.isChartJsInitialized = true;
        if(!this.weekid){
            // if weekid is not set by parent LWC, take recordId from the page
            this.weekid = this.recordId;
        }
        this.createCharts();
    }

    schedules = [];
    labels = [];
    assignedWorkOrders = [];
    unassignedWorkOrders = [];
    totalCost = [];
    labourCost = [];
    lateWorkFine = [];
    unfinishedWorkFine = [];
    regularTimeHours = [];
    overtimeHours = [];

    createCharts(){
        getSchedulesByWeek({ weekId: this.weekid })
        .then(data => {
            this.schedules = data;
            this.schedules.forEach(schedule => {
                // take the name of the Scheduler by taking the substring after "gerenated by"
                this.labels.push(schedule.Name.split('generated by ')[1]);
                this.assignedWorkOrders.push(schedule.Number_of_Assignments__c);
                this.unassignedWorkOrders.push(schedule.Number_of_Work_Orders_in_Week__c - schedule.Number_of_Assignments__c);
                this.totalCost.push(schedule.Total_Cost__c);
                this.labourCost.push(schedule.Total_Labour_Cost__c);
                this.lateWorkFine.push(schedule.Total_Fine__c);
                this.unfinishedWorkFine.push(schedule.Total_Fine_Unfinished_Work_Orders__c);
                this.regularTimeHours.push(schedule.Total_Hours_spent_in_Regular_Time__c);
                this.overtimeHours.push(schedule.Total_Hours_spent_in_Overtime_Hours__c);
            });
            try {
                const config1 = new Config(this.labels, 'Work Orders Assignment', this.variant);
                config1.addDataset('Assigned Work Orders', this.assignedWorkOrders, '#0E9EDA');
                config1.addDataset('Unassigned Work Orders', this.unassignedWorkOrders, '#D8230D');
                const config2 = new Config(this.labels, 'Cost', this.variant);
                if(this.variant !== 'Horizontal'){
                    // show Total cost parameter only for vertical bar
                    config2.addDataset('Total cost', this.totalCost, '#0076D1');
                }
                config2.addDataset('Labour cost', this.labourCost, '#08AAED');
                config2.addDataset('Fine for late work orders', this.lateWorkFine, '#04E1CA');
                config2.addDataset('Fine for unfinished work orders', this.unfinishedWorkFine, '#076189');
                const config3 = new Config(this.labels, 'Hours spent', this.variant);
                config3.addDataset('Regular Time Hours', this.regularTimeHours, '#182CCE');
                config3.addDataset('Overtime Hours', this.overtimeHours, '#D97D0D');
                this.setupChart(config1, 'chart1');
                this.setupChart(config2, 'chart2');
                this.setupChart(config3, 'chart3');
            } catch (error) {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error!',
                        message: 'Error setting canvas: ' + error.message,
                        variant: 'error',
                    }),
                );
            }
        })
        .catch(error => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error!',
                    message: 'Schedule not retrieved: ' + error.message,
                    variant: 'error',
                }),
            );
        });
    }

    setupChart(config, chartName){
        const canvas = document.createElement('canvas');
        this.template.querySelector('.' + chartName).appendChild(canvas);
        const ctx = canvas.getContext('2d');
        this.chart = new window.Chart(ctx, config);
    }
}

class Config {
    constructor(labels, title, variant){
        this.type = "bar";
        this.responsive = true;
        this.data = {
            labels: labels,
            datasets: []
        };
        this.options = {
            plugins: {
                title: {
                    display: true,
                    text: title
                }
            }
        }
        if(variant === 'Horizontal'){
            this.makeHorizontal();
        }
    }

    addDataset(label, data, backgroundColor){
        this.data.datasets.push({
            label: label,
            data: data,
            backgroundColor: backgroundColor,
        });
    }

    makeHorizontal(){
        this.options.indexAxis = 'y';
        this.options.scales = {
            x: {
                stacked: true,
            },
            y: {
                stacked: true
            }
        };
        /*this.options.plugins.legend = {
            position: 'right',
        };*/
    }
}